<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
      <groupId>uk.gov.ipt</groupId>
      <artifactId>ipt-mi-etl-rpms</artifactId>
      <version>0.184-SNAPSHOT</version>
    </parent>

    <groupId>uk.gov.ipt</groupId>
    <artifactId>ipt-mi-dw-vault-rpm</artifactId>
    <version>0.184-SNAPSHOT</version>

    <packaging>rpm</packaging>
    <name>IPT MI Spark DW VAULT RPM</name>

    <scm>
        <connection>ssh://git@10.1.2.3:2022/mi/ipt-mi-etl.git</connection>
        <developerConnection>ssh://git@10.1.2.3:2022/mi/ipt-mi-etl.git</developerConnection>
        <url>scm:git@10.1.2.3:2022/mi/ipt-mi-etl.git</url>
        <tag>HEAD</tag>
    </scm>

    <distributionManagement>
        <repository>
            <id>nexus</id>
            <name>Internal Releases</name>
            <url>http://aretzm01:8081/nexus/content/repositories/releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus</id>
            <name>Internal Releases</name>
            <url>http://aretzm01:8081/nexus/content/repositories/snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <properties>
        <ipt-application.version>${ipt-mi-etl-bom.version}</ipt-application.version>
        <ipt-application.name>ipt-mi-dw-vault</ipt-application.name>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>uk.gov.ipt</groupId>
                <artifactId>${ipt-application.name}</artifactId>
                <version>${ipt-application.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>uk.gov.ipt</groupId>
            <artifactId>${ipt-application.name}</artifactId>
        </dependency>
    </dependencies>


    <build>
        <finalName>${ipt-application.name}-${project.version}</finalName>
        <plugins>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <descriptors>
                        <descriptor>src/main/assembly/src.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>rpm-maven-plugin</artifactId>
                <version>2.1-alpha-3</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>rpm</id>
                        <phase>package</phase>
                        <goals>
                            <goal>rpm</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <name>${project.artifactId}</name>
                    <version>${project.version}</version>
                    <copyright>EPL</copyright>
                    <distribution>IPT MI DW VAULT RPM</distribution>
                    <group>Application/Jars</group>
                    <packager>IPT</packager>
                    <changelogFile>src/changelog</changelogFile>
                    <defineStatements>
                        <defineStatement>_unpackaged_files_terminate_build 0</defineStatement>
                    </defineStatements>
                    <mappings>
                        <mapping>
                            <directory>/etc/${ipt-application.name}/scripts/</directory>
                            <filemode>777</filemode>
                            <username>root</username>
                            <groupname>root</groupname>
                            <sources>
                                <source>
                                    <location>${project.basedir}/scripts/</location>
                                    <filter>true</filter>
                                </source>
                            </sources>
                        </mapping>
                        <mapping>
                            <directory>/opt/${ipt-application.name}</directory>
                            <filemode>777</filemode>
                            <username>root</username>
                            <groupname>root</groupname>
                            <sources>
                                <source>
                                    <location>${project.basedir}/target/${ipt-application.name}-${project.version}-dist.tar.gz</location>
                                </source>
                            </sources>
                        </mapping>
                    </mappings>
                    <preinstallScriptlet>
                        <script>
                            RPM_FAIL=/var/ebsa_rpm/${project.artifactId}.rpmfail

                            /bin/mkdir -p /var/ebsa_rpm
                            /bin/touch ${RPM_FAIL}
                            /bin/echo 'Running preinstallScriptlet' &amp; >> ${RPM_FAIL}

                            /bin/echo "Installing now" &amp; >> ${RPM_FAIL}

                            SPARK_APP=${ipt-application.name}
                            SPARK_SCRIPT_DIR="/etc/${SPARK_APP}/scripts"
                            SPARK_CONF_FILE=/etc/samza_env.conf
                            SPARK_WORKDIR=/opt/${SPARK_APP}/*

                            find /opt/ipt-mi-dw-vault/* -name 'ipt-mi-dw-vault' -type d -print
                            if [ $? -eq '0' ]; then
                              rm -r ${SPARK_WORKDIR}
                            else
                              echo "No previous version to clear up" >> ${RPM_FAIL}
                            fi

                            DEPLOY_MODE=$(grep DEPLOY_MODE $SPARK_CONF_FILE | sed -e s'/DEPLOY_MODE=//')
                            STREAM_NAMESPACING=$(grep STREAM_NAMESPACING $SPARK_CONF_FILE | sed -e s'/STREAM_NAMESPACING=//')

                            # Only starts the spark job if DEPLOY_MODE=auto in the corresponding configuration file
                            if [ "${DEPLOY_MODE}" == "auto" ]; then

                                # Run only for upgrades, if its initial install there won't be spark-wrapper.sh to use/stop

                                echo "Killing yarn applications" &amp; >> ${RPM_FAIL}

                                ${SPARK_SCRIPT_DIR}/spark-wrapper.bash stop &amp; >> ${RPM_FAIL}

                                if [ $? -ne 0 ]; then
                                  echo "Unable to kill yarn application" &amp; >> ${RPM_FAIL}
                                  exit 1
                              fi
                            fi

                        </script>
                    </preinstallScriptlet>
                    <postinstallScriptlet>
                        <script>
                            # Deploy and start app when rpm is installed
                            RPM_FAIL=/var/ebsa_rpm/${project.artifactId}.rpmfail

                            SPARK_APP=${ipt-application.name}
                            SPARK_SCRIPT_DIR=/etc/${SPARK_APP}/scripts
                            SPARK_CONF_FILE=/etc/samza_env.conf

                            DEPLOY_MODE=$(grep DEPLOY_MODE $SPARK_CONF_FILE | sed -e s'/DEPLOY_MODE=//')
                            STREAM_NAMESPACING=$(grep STREAM_NAMESPACING $SPARK_CONF_FILE | sed -e s'/STREAM_NAMESPACING=//')

                            # Only starts the spark job if DEPLOY_MODE=auto in the corresponding configuration file
                            if [ "${DEPLOY_MODE}" == "auto" ]; then

                            echo "Deploying application" &amp; >> ${RPM_FAIL}

                            ${SPARK_SCRIPT_DIR}/spark-wrapper.bash deploy ${CLASS} ${STREAM_NAMESPACING} &amp; >> ${RPM_FAIL}

                            if [ $? -ne 0 ]; then
                            echo "Unable to deploy application" &amp; >> ${RPM_FAIL}
                            exit 1
                            fi
                            fi

                            rm -f ${RPM_FAIL}
                        </script>
                    </postinstallScriptlet>
                    <preremoveScriptlet>
                        <script>
                            # When the package is removed, attempt to stop the spark job and clean resources

                            RPM_FAIL=/var/ebsa_rpm/${project.artifactId}.rpmfail

                            echo 'Running preremoveScriptlet' &amp; >> ${RPM_FAIL}

                            SPARK_APP=${ipt-application.name}
                            SPARK_SCRIPT_DIR=/etc/${SPARK_APP}/scripts

                            if [ "$1" = 0 ]; then
                            ${SPARK_SCRIPT_DIR}/spark-wrapper.bash undeploy &amp; >> ${RPM_FAIL}

                            if [ $? -ne 0 ]; then
                            echo "Unable to undeploy $SPARK_APP" &amp; >> ${RPM_FAIL}
                            exit 1
                            else
                            rm -f ${RPM_FAIL}
                            fi
                            else
                            rm -f ${RPM_FAIL}
                            fi
                        </script>
                    </preremoveScriptlet>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>build-properties</id>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <echo file="target/${project.artifactId}-build.properties" append="false">MVN_VERSION=${project.version}${line.separator}MVN_GROUP=${project.groupId}${line.separator}MVN_ARTIFACT=${project.artifactId}</echo>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
